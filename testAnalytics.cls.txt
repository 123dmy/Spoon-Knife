/**
@  ClassName   : TBN_SLAViolationBatch 
@  JIRATicket  : ZMEDZSP-02
@  Description : Batch that insert SLA_Violation records for SLA2 - Lead/Contact Responsiveness,  
				 SLA3 - Lead/Contact Expired and SLA5 - Slow Progress Oppty Stage and update Last_SLA2_Violation_Date_Time__c field of
				 lead and contact and Last_SLA5_Violation_Date_Time__c  field of opportunity
*/
public with sharing class TBN_SLAViolationBatch implements database.Batchable<Sobject>   
{ 
	list<sObject> lstSobject =  new list<sObject>();      //list to store the sobject for SLA2_Violated__c = true or SLA5_Violated__c = True
	
	/**
    @ MethodName : Start
    @ Param	 	 : Database.BatchableContext BC 
    @ Description: Queries all the Leads and supply to the execute method 
    */
    public list<sObject> start(Database.BatchableContext BC) 
    { 
       //Date d = System.today() - 7;
	   //Iterate over  Lead that satisfy the condition in SLA2 - Lead/Contact Responsiveness 
	   for(sObject objSobject: [ Select Id, OwnerId, RecordType.Name, RecordTypeId 
								 from Lead 
								 where SLA2_Violated__c = true  
								 And RecordType.Name = 'General Sales Lead' 
								 And (Status = 'Open - Pending Sales Contact (New)' OR Status = 'Open - Pending Sales Contact (Re-engage)')  
								 And (Last_SLA2_Violation_Date_Time__c != LAST_N_DAYS:7 OR Last_SLA2_Violation_Date_Time__c = null)
								 And IsConverted = false])
		{
			lstSobject.add(objSobject);					   	
		}
		//Iterate over Contact that satisfy the condition in SLA2 - Lead/Contact Responsiveness
		for(sObject objSobject:[ Select Id, OwnerId, RecordType.Name, RecordTypeId 
								 from Contact 
								 where SLA2_Violated__c = true  
								 And (RecordType.Name = 'General Contact' OR RecordType.Name = 'ZM User Contact')
								 And (Contact_Status__c = 'Open - Pending Sales Contact (New)' OR Contact_Status__c  = 'Open - Pending Sales Contact (Re-engage)') 
								 And (Last_SLA2_Violation_Date_Time__c != LAST_N_DAYS:7 OR Last_SLA2_Violation_Date_Time__c = null)]) 
		{
			lstSobject.add(objSobject);			 	
		}
		//Iterate over  Opportunity that satisfy the condition in SLA5 - Slow Progress Oppty Stage 
		for(sObject objSobject: [Select Id, RecordType.Name, RecordTypeId, OwnerId, Last_SLA5_Violation_Date_Time__c
								 from Opportunity
								 where SLA5_Violated__c = True  
								 And RecordType.Name = 'General Sales Opportunity'
								 And IsClosed = False ])
		{
			lstSobject.add(objSobject);					 	
		}
		system.debug('lstSobject====='+lstSobject.size());
        return lstSobject;
        
    }
    
    /**
    @ MethodName : Execute
    @ Param 	 : Database.BatchableContext BC, List<sObject> lstsobject
    @ Description: Inserts SlA_Violation__c records and updates lead,contact and opportunity
    */
    public void execute(Database.BatchableContext BC, List<sObject> lstsobject)
    {
    	try
		{
			String getContactKeyPrefix = Contact.SObjectType.getDescribe().getKeyPrefix();
        	String getLeadKeyPrefix = Lead.SObjectType.getDescribe().getKeyPrefix();
			String getOpportunityKeyPrefix = Opportunity.SObjectType.getDescribe().getKeyPrefix();
			
			list<SLA_Violation__c> lstSlaViolationsToBeInserted = new list<SLA_Violation__c>();
			list<Lead> lstLeadsToUpdate = new list<Lead>();
			list<Contact> lstContactsToUpdate = new list<Contact>();
			list<Opportunity> lstOpportunityToUpdate = new list<Opportunity>(); 
			system.debug('Date now======='+system.Now());
			if(!lstsobject.isEmpty())
			{
				for(sObject objSobject: lstsobject)
				{
					string strObjectId = objSobject.Id;
					//if the sobject is contact creating SLA_Violation__c records and storing into list to for insertion.
					if(strObjectId.startsWith(getContactKeyPrefix))
					{
						Contact objContact = (Contact)objSobject;
						SLA_Violation__c  objSLA = new SLA_Violation__c (Type__c = 'Lead/Contact Responsiveness', OwnerId = objContact.OwnerId, Contact__c = objContact.Id );
						objContact.Last_SLA2_Violation_Date_Time__c = system.Now();
						lstSlaViolationsToBeInserted.add(objSLA);
						lstContactsToUpdate.add(objContact);
						
					}
					//if the sobject is Lead creating SLA_Violation__c records and storing into list to for insertion.
					else if(strObjectId.startsWith(getLeadKeyPrefix))
					{
						Lead objLead = (Lead)objSobject;
						SLA_Violation__c  objSLA = new SLA_Violation__c (Type__c = 'Lead/Contact Responsiveness', OwnerId = objLead.OwnerId, Lead__c = objLead.Id );
						objLead.Last_SLA2_Violation_Date_Time__c = system.Now();
						lstSlaViolationsToBeInserted.add(objSLA);
						lstLeadsToUpdate.add(objLead);
					}
					//if the sobject is Opportunity creating SLA_Violation__c records and storing into list to for insertion.
					else if(strObjectId.startsWith(getOpportunityKeyPrefix))
					{
						Opportunity objOpportunity = (Opportunity)objSobject;
						system.debug('=============objOpportunity.Last_SLA5_Violation_Date_Time__c=========' + objOpportunity.Last_SLA5_Violation_Date_Time__c);
						if((objOpportunity.Last_SLA5_Violation_Date_Time__c == null) || (date.today().daysBetween(Date.valueof(objOpportunity.Last_SLA5_Violation_Date_Time__c)) >= 41 ) )
						{
							system.debug('=============objOpportun=========' + objOpportunity.Last_SLA5_Violation_Date_Time__c);
							SLA_Violation__c  objSLA = new SLA_Violation__c (Type__c = 'Slow Progress Oppty Stage', OwnerId = objOpportunity.OwnerId, Opportunity__c = objOpportunity.Id );
							objOpportunity.Last_SLA5_Violation_Date_Time__c = system.Now();
							lstSlaViolationsToBeInserted.add(objSLA);
							lstOpportunityToUpdate.add(objOpportunity);
						}
					}
				}
			}
			
			system.debug('list size ========'+lstSlaViolationsToBeInserted.size());
			if(!lstSlaViolationsToBeInserted.isEmpty())
				insert lstSlaViolationsToBeInserted;
				
			if(!lstLeadsToUpdate.isEmpty())
				update lstLeadsToUpdate;
				
			if(!lstContactsToUpdate.isEmpty())
				update lstContactsToUpdate;
			
			if(!lstOpportunityToUpdate.isEmpty())
				update lstOpportunityToUpdate;
		}
		catch(Exception e)
		{
			system.debug('############Exception'+e);
		}
    }
    
    /**
    @ MethodName : Finish
    @ Param 	 : Database.BatchableContext BC
    @ Description: Performs post Batch execution operations, if any
    */
    public void finish(Database.BatchableContext BC)
    {
        // Does nothing
    }
}